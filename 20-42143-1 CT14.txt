1. Create a cursor that can output all the data from salgradetable.
Solution:

DECLARE

 CURSOR c_salgrade IS

   SELECT * FROM salgrade;

 v_record salgrade%ROWTYPE;

BEGIN

 OPEN c_salgrade;

 LOOP

   FETCH c_salgrade INTO v_record;

   EXIT WHEN c_salgrade%NOTFOUND;

   DBMS_OUTPUT.PUT_LINE('Grade ' || v_record.grade || ': ' || v_record.min_sal || '-' || v_record.max_sal);

 END LOOP;

 CLOSE c_salgrade;

END;

 

BEGIN

 c_salgrade;

END;

 

2. Create a record that can output the id, name, job, and hiredate of the employee whose Id is 7654.
Solution:

DECLARE

 v_id emp.empno%TYPE := 7654;

 v_name emp.ename%TYPE;

 v_job emp.job%TYPE;

 v_hiredate emp.hiredate%TYPE;

BEGIN

 SELECT empno, ename, job, hiredate INTO v_id, v_name, v_job, v_hiredate

 FROM emp WHERE empno = v_id;

 DBMS_OUTPUT.PUT_LINE('ID: ' || v_id || ', Name: ' || v_name || ', Job: ' || v_job || ', Hire Date: ' || v_hiredate);

END;


3.


CREATE OR REPLACE TRIGGER row_added after INSERT ON salgrade FOR EACH ROW  WHEN (NEW.grade > 0)  BEGIN        dbms_output.put_line('New Row Added');  



4.


CREATE OR REPLACE PACKAGE BODY sal_pack AS          PROCEDURE display_losal(e__id salgrade.grade%TYPE) IS     e_nam salgrade.losal%TYPE;     BEGIN        SELECT losal INTO e_nam        FROM salgrade       WHERE grade = e__id;        dbms_output.put_line('Employee Lowest sal: '|| e_nam);     END display_losal;  PROCEDURE display_hisal (e__id salgrade.grade%TYPE) IS     e_nam salgrade.hisal%TYPE;     BEGIN        SELECT hisal INTO e_sal        FROM salgrade       WHERE grade = e__id;        dbms_output.put_line('Employee Highest Salary '|| e_sal);     END display_hisal;  END sal_pack;  